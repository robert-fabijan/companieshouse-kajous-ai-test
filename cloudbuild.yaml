steps:
  # Step to deploy API function
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    args:
    - gcloud
    - functions
    - deploy
    - air-pollution-api-function
    - --entry-point=gcloud_get_openweather_data_function
    - --region=europe-west1
    - --source=./gcloud/gcloud_functions
    - --trigger-http
    - --runtime=python311

  # Step to deploy Transformation Function n
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    args:
    - gcloud
    - functions
    - deploy
    - transform-air-pollution
    - --entry-point=gcloud_transform_api_message
    - --region=europe-west1
    - --source=./gcloud/gcloud_functions
    - --trigger-topic=air-pollution-topic
    - --runtime=python311

  # Step to deploy the Cloud Workflow s
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args:
      - workflows
      - deploy
      - workflow-air-pollution
      - --source=workflows/openweather_api_to_pubsub.yaml
      - --location=europe-west1

  # # Step to install Airflow and other Python dependencies
  # # build the docker image
  # - name: 'gcr.io/cloud-builders/docker'
  #   args: ['build', '-t', 'gcr.io/${PROJECT_ID}/cicd:${SHORT_SHA}', '.'] # tag docker image with commit sha
  #   id: 'docker build'

  # # Example: Passing the environment variable to Docker
  # - name: 'gcr.io/cloud-builders/docker'
  #   args: ['run', '-e', 'GOOGLE_APPLICATION_CREDENTIALS_JSON=${_CREDENTIALS}', 'gcr.io/${PROJECT_ID}/cicd:${SHORT_SHA}']


# availableSecrets:
#   secretManager:
#   - versionName: projects/${PROJECT_ID}/secrets/my-secret-service-account/versions/latest
#     env: '_SECRET_ENV_VAR'

